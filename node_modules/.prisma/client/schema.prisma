// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                       @id @default(autoincrement())
  email            String                    @unique
  passwordHash     String
  name             String
  role             ROLES                     @default(USER)
  messagesSent     Message[]                 @relation("MessagesSent")
  messagesReceived Message[]                 @relation("MessagesReceived")
  conversations    ConversationParticipant[]
}

model Conversation {
  id           Int                       @id @default(autoincrement())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int

  @@unique([userId, conversationId]) // evita que un user se repita en una conversaci√≥n
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  sender         User         @relation("MessagesSent", fields: [senderId], references: [id])
  senderId       Int
  recipient      User         @relation("MessagesReceived", fields: [recipientId], references: [id])
  recipientId    Int
}

enum ROLES {
  USER
  ADMIN
}
